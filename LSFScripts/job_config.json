{ 
    "JobParams": {

        "CreateHash": {
            "outfile": "CreateHash_Job.q",
            "header": [
                "#SBATCH -J CreateHash",
                "#SBATCH -p 1week",
                "#SBATCH -o {0}Logs/CreateHash.out",
                "#SBATCH -e {0}Logs/CreateHash.err",
                "#SBATCH -t 2-00:00:00",
                "module purge",
                "module load Biopython"],
            "body": [
                "create_hash.py -i {0}original_reads/ -o {0}hashed_reads/ -k 33 -s 31"]},

        "HashReads": {
            "outfile": "HashReads_ArrayJob.q",
            "array": ["original_reads/","*.fastq.*"],
            "header": [
                "#SBATCH -J HashReads[1-{array_size}]",
                "#SBATCH --array=1-{array_size}",
                "#SBATCH -p 1day",
                "#SBATCH -o {0}Logs/HashReads%a.out",
                "#SBATCH -e {0}Logs/HashReads%a.err",
                "#SBATCH -t 02:00:00",
                "module purge",
                "module load Biopython"],
            "body": [
                "hash_fastq_reads.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}original_reads/ -o {0}hashed_reads/"]},

        "MergeHash": {
            "outfile": "MergeHash_ArrayJob.q",
            "array": ["original_reads/","*.fastq",5],
            "header": [
                "#SBATCH -J MergeHash[1-{array_size}]",
                "#SBATCH --array=1-{array_size}",
                "#SBATCH -p 1day",
                "#SBATCH -o {0}Logs/MergeHash-%a.out",
                "#SBATCH -e {0}Logs/MergeHash-%a.err",
                "#SBATCH --mem-per-cpu=20G",
                "#SBATCH -t 01:00:00",
                "module purge",
                "module load Biopython"],
            "body": [
                "merge_hashq_files.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}hashed_reads/ -o {0}hashed_reads/"]},

        "CombineFractions": {
            "outfile": "CombineFractions_ArrayJob.q",
            "array": ["original_reads/","*.fastq",1],
            "header": [
                "#SBATCH -J CombineFractions[1-{array_size}]",
                "#SBATCH --array=1-{array_size}",
                "#SBATCH -p 1day",
                "#SBATCH -o {0}Logs/CombineFractions-%a.out",
                "#SBATCH -e {0}Logs/CombineFractions-%a.err",
                "#SBATCH --mem-per-cpu=20G",
                "#SBATCH -t 05:00:00",
                "module purge",
                "module load Biopython"],
            "body": [
                "merge_hashq_fractions.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}hashed_reads/ -o {0}hashed_reads/"]},

        "GlobalWeights": {
            "outfile": "GlobalWeights_Job.q",
            "header": [
                "#SBATCH -J GlobalWeights",
                "#SBATCH -p 1day",
                "#SBATCH -o {0}Logs/GlobalWeights.out",
                "#SBATCH -e {0}Logs/GlobalWeights.err",
                "#SBATCH --mem=230G",
                "#SBATCH -t 1-00:00:00",
                "module purge",
                "module load Biopython",
                "module load gensim"],
            "body": [
                "tfidf_corpus.py -i {0}hashed_reads/ -o {0}cluster_vectors/"]},

        "KmerCorpus": {
            "outfile": "KmerCorpus_ArrayJob.q",
            "array": ["hashed_reads/","*.count.hash"],
            "header": [
                "#SBATCH -J KmerCorpus[1-{array_size}]",
                "#SBATCH --array=1-{array_size}",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/KmerCorpus-%a.out",
                "#SBATCH -e {0}Logs/KmerCorpus-%a.err",
                "#SBATCH -t 01:00:00",
                "#SBATCH --mem-per-cpu=20G",
                "module purge",
                "module load Biopython",
                "module load gensim"],
            "body": [
                "kmer_corpus.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}hashed_reads/ -o {0}cluster_vectors/"]},

        "KmerLSI": {
            "outfile": "KmerLSI_Job.q",
            "header": [
                "#SBATCH -J KmerLSI",
                "#SBATCH -p 1week",
                "#SBATCH -o {0}Logs/KmerLSI.out",
                "#SBATCH -e {0}Logs/KmerLSI.err",
                "#SBATCH -n 6",
                "#SBATCH --mem=230G",
                "module purge",
                "module load Biopython",
                "module load gensim",
                "module load Pyro4",
                "export PYRO_SERIALIZERS_ACCEPTED=serpent,json,marshal,pickle",
                "export PYRO_SERIALIZER=pickle",
                "export PYRO_NS_HOST=localhost",
                "export PYRO_NS_PORT=65431",
                "export PYRO_HOST=localhost",
                "export PYRO_REQUIRE_EXPOSE=False",
                "python -m Pyro4.naming -n 0.0.0.0 > {0}Logs/nameserver.log 2>&1 &","P1=$!","python -m gensim.models.lsi_worker > {0}Logs/worker1.log 2>&1 &","P2=$!",
                "python -m gensim.models.lsi_worker > {0}Logs/worker2.log 2>&1 &","P3=$!",
                "python -m gensim.models.lsi_worker > {0}Logs/worker3.log 2>&1 &","P4=$!",
                "python -m gensim.models.lsi_worker > {0}Logs/worker4.log 2>&1 &","P5=$!",
                "python -m gensim.models.lsi_worker > {0}Logs/worker5.log 2>&1 &","P6=$!",
                "python -m gensim.models.lsi_dispatcher > {0}Logs/dispatcher.log 2>&1 &","P7=$!"],
            "body": [
                "kmer_lsi.py -i {0}hashed_reads/ -o {0}cluster_vectors/","kill $P1 $P2 $P3 $P4 $P5 $P6 $P7"]},

        "KmerClusterIndex": {
            "outfile": "KmerClusterIndex_Job.q",
            "header": [
                "#SBATCH -J KmerClusterIndex",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/KmerClusterIndex.out",
                "#SBATCH -e {0}Logs/KmerClusterIndex.err",
                "#SBATCH --mem=230G",
                "module purge",
                "module load Biopython",
                "module load gensim"],
            "body": [
                "kmer_cluster_index.py -i {0}hashed_reads/ -o {0}cluster_vectors/ -t 0.68",
                "create_jobs.py -j KmerClusterParts -i ./",
                "X=`sed -n 1p {0}hashed_reads/hashParts.txt`",
                "sed -i \"s/%parts%/$X/g\" {0}jobs/KmerClusterParts_ArrayJob.q",
                "create_jobs.py -j KmerClusterMerge -i ./",
                "X=`sed -n 1p {0}cluster_vectors/numClusters.txt`",
                "sed -i \"s/%clusters%/$X/g\" {0}jobs/KmerClusterMerge_ArrayJob.q"]},

        "KmerClusterParts": {
            "outfile": "KmerClusterParts_ArrayJob.q",
            "array": ["hashed_reads/","*.hashq.*"],
            "header": [
                "#SBATCH -J KmerClusterParts[1-%parts%]",
                "#SBATCH --array=1-%parts%",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/KmerClusterParts-%a.out",
                "#SBATCH -e {0}Logs/KmerClusterParts-%a.err",
                "#SBATCH --mem-per-cpu=70G",
                "module purge",
                "module load Biopython",
                "module load gensim"],
            "body": [
                "kmer_cluster_part.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}hashed_reads/ -o {0}cluster_vectors/ -t 0.68"]},

        "KmerClusterMerge": {
            "outfile": "KmerClusterMerge_ArrayJob.q",
            "array": ["hashed_reads/","*.hashq.*"],
            "header": [
                "#SBATCH -J KmerClusterMerge[1-%clusters%]",
                "#SBATCH --array=1-%clusters%",                
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/KmerClusterMerge-%a.out",
                "#SBATCH -e {0}Logs/KmerClusterMerge-%a.err",
                "#SBATCH --mem-per-cpu=70G",
                "module purge",
                "module load Biopython",
                "module load gensim"],
            "body": [
                "kmer_cluster_merge.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}cluster_vectors/ -o {0}cluster_vectors/"]},

        "KmerClusterCols": {
            "outfile": "KmerClusterCols_Job.q",
            "header": [
                "#SBATCH -J KmerClusterCols",
                "#SBATCH -p 1day",
                "#SBATCH -o {0}Logs/KmerClusterCols.out",
                "#SBATCH -e {0}Logs/KmerClusterCols.err",
                "#SBATCH --mem=230G",
                "module purge",
                "module load Biopython",
                "module load gensim"],
            "body": [
                "kmer_cluster_cols.py -i {0}hashed_reads/ -o {0}cluster_vectors/"]},

        "ReadPartitions": {
            "outfile": "ReadPartitions_ArrayJob.q",
            "array": ["hashed_reads/","*.hashq.*"],
            "header": [
                "#SBATCH -J ReadPartitions[1-{array_size}]",
                "#SBATCH --array=1-{array_size}",
                "#SBATCH -p 1week",
                "#SBATCH -o {0}Logs/ReadPartitions-%a.out",
                "#SBATCH -e {0}Logs/ReadPartitions-%a.err",
                "#SBATCH --mem-per-cpu=70G",
                "module purge",
                "module load Biopython"],
            "body": [
                "write_partition_parts.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}hashed_reads/ -o {0}cluster_vectors/ -t TMPDIR"]},

        "MergeIntermediatePartitions": {
            "outfile": "MergeIntermediatePartitions_ArrayJob.q",
            "array": ["cluster_vectors/","*.cluster.npy"],
            "header": [
                "#SBATCH -J MergeIntermediatePartitions[1-{array_size}]",
                "#SBATCH --array=1-{array_size}",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/MergeIntermediatePartitions-%a.out",
                "#SBATCH -e {0}Logs/MergeIntermediatePartitions-%a.err",
                "#SBATCH --mem-per-cpu=20G",
                "module purge",
                "module load Biopython"],
            "body": [
                "merge_partition_parts.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}cluster_vectors/ -o {0}read_partitions/"]},

        "SplitPairs": {
            "outfile": "SplitPairs_ArrayJob.q",
            "array": ["cluster_vectors/","*.cluster.npy"],
            "header": [
                "#SBATCH -J SplitPairs[1-{array_size}]",
                "#SBATCH --array=1-{array_size}",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/SplitPairs-%a.out",
                "#SBATCH -e {0}Logs/SplitPairs-%a.err",
                "#SBATCH --mem-per-cpu=20G",
                "module purge",
                "module load Biopython"],
            "body": [
                "split_read_pairs.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}read_partitions/ -o {0}read_partitions/"]},

        "PhylerClassify": {
            "outfile": "PhylerClassify_ArrayJob.q",
            "array": ["cluster_vectors/","*.cluster.npy"],
            "header": [
                "#SBATCH -J PhylerClassify[1-",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/PhylerClassify-%a.out",
                "#SBATCH -e {0}Logs/PhylerClassify-%a.err",
                "#SBATCH -M 4","source /broad/software/scripts/useuse",
                "reuse BLAST"],
            "body": [
                "sleep $(($SLURM_ARRAY_TASK_ID % 60))",
                "phyler_classify.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}read_partitions/ -o {0}phyler/"]},

        "PhylerIdentify": {
            "outfile": "PhylerIdentify_ArrayJob.q",
            "array": ["cluster_vectors/","*.cluster.npy"],
            "header": [
                "#SBATCH -J PhylerIdentify[1-",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/PhylerIdentify-%a.out",
                "#SBATCH -e {0}Logs/PhylerIdentify-%a.err",
                "#SBATCH -M 2"],
            "body": [
                "sleep $(($SLURM_ARRAY_TASK_ID % 60))",
                "phyler_identify.py -r ${{SLURM_ARRAY_TASK_ID}} -i {0}read_partitions/ -o {0}phyler/"]},

        "PhylerSummary": {
            "outfile": "PhylerSummary_Job.q",
            "header": [
                "#SBATCH -J PhylerSummary",
                "#SBATCH -p htc",
                "#SBATCH -o {0}Logs/PhylerSummary.out",
                "#SBATCH -e {0}Logs/PhylerSummary.err",
                "#SBATCH -M 2"],
            "body": [
                "phyler_summary.py -i {0}phyler/"]}
    },

    "CommonElements": {
        "header": ["#!/bin/bash"],
        "body": ["echo Date: `date`","t1=`date +%s`"],
        "footer": ["[ $? -eq 0 ] || echo 'JOB FAILURE: $?'","echo Date: `date`","t2=`date +%s`","tdiff=`echo 'scale=3;('$t2'-'$t1')/3600' | bc`","echo 'Total time:  '$tdiff' hours'"]
    }
}